name: CI
on:
  pull_request:
  push:
    branches:
      - main
concurrency:
  # Pushing new changes to a branch will cancel any in-progress CI runs of this workflow
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Restrict jobs in this workflow to have no permissions by default; permissions
# should be granted per job as needed using a dedicated `permissions` block
permissions: {}

jobs:
  bandit:
    permissions:
      contents: read # to fetch (actions/checkout)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install -r requirements.txt
      - run: bandit -r .
  flake8:
    permissions:
      contents: read # to fetch (actions/checkout)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install -r requirements.txt
      - run: flake8 --max-line-length 120 .
  isort:
    permissions:
      contents: read # to fetch (actions/checkout)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: isort/isort-action@v1
        with:
          requirements-files: "requirements.txt"
          configuration: "--check-only --diff --profile black"
  mypy:
    permissions:
      contents: read # to fetch (actions/checkout)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install -r requirements.txt
      - run: mypy .
  pydocstyle:
    permissions:
      contents: read # to fetch (actions/checkout)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install -r requirements.txt
      - run: pydocstyle --convention=google
  pylint:
    permissions:
      contents: read # to fetch (actions/checkout)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install -r requirements.txt
      - run: pylint -rn -sn $(git ls-files '*.py')
  ruff:
    permissions:
      contents: read # to fetch code (actions/checkout)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: astral-sh/ruff-action@v3 # v3.5.1
        with:
          version-file: 'pyproject.toml'
          args: 'format --check --diff'
  test:
    permissions:
      contents: read # to fetch (actions/checkout)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install -r requirements.txt
      - uses: actions/setup-node@v4
      - run: npm i
      - run: pytest .
